/*********************************************************\
 * Copyright (c) 2012-2018 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../SharedShaderPiece/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float3, TexCoordDepthVS,			 0)	// xy = texture coordinate, z = grass depth
	INPUT_TEXTURE_COORDINATE(2, float4, ColorVS,					 1)	// Color
	INPUT_TEXTURE_COORDINATE(3, float3, PreviousClipSpacePositionVS, 2)	// Previous clip space position
	INPUT_TEXTURE_COORDINATE(4, float3, ViewSpaceNormalVS,			 3)	// View space normal TODO(co) Currently unused for debug
	DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)	// rgb = albedo color, a = alpha
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4x4 WorldSpaceToViewSpaceMatrix[2];
	float4x4 ViewSpaceToClipSpaceMatrix[2];
	float4x4 PreviousWorldSpaceToViewSpaceMatrix;
	float4	 WorldSpaceToViewSpaceQuaternion;
	float4	 WindDirectionStrength;	// xyz = normalized wind direction vector, w = wind strength
	float2   ViewportSize;
	float2   InverseViewportSize;
	float2	 ProjectionParameters;
	float    GlobalTimeInSeconds;
	float    PreviousGlobalTimeInSeconds;
	float	 GrassWindHeightFactor;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, _argb_alpha, 0)

// Samplers
SAMPLER_STATE(2, 0, SamplerLinear, 0)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Fetch texel
	float4 color = SAMPLE_2D(_argb_alpha, SamplerLinear, MAIN_INPUT(TexCoordDepthVS).xy);

	// Perform alpha map based fragment rejection (no alpha reference material parameter by intent because real shaders use alpha to coverage)
	if (0.8f >= color.a)
	{
		discard;
	}

	// Apply grass color
	color *= MAIN_INPUT(ColorVS);

	// Done
	MAIN_OUTPUT_COLOR(0) = color;
MAIN_END
