/*********************************************************\
 * Copyright (c) 2012-2022 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


// Basing on "Hierarchical-Z map based occlusion culling" - "Hi-Z map construction" - http://rastergrid.com/blog/2010/10/hierarchical-z-map-based-occlusion-culling/
// and https://www.gamedev.net/forums/topic/586443-d3d11-cshierarchical-z-map-based-occlusion-culling/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../Shared/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)

// Minimum operator due to the usage of Reversed-Z (see e.g. https://developer.nvidia.com/content/depth-precision-visualized and https://nlguillemot.wordpress.com/2016/12/07/reversed-z-in-opengl/)
#define COMPARISON_OPERATOR min


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_DEPTH
OUTPUT_END

// Textures
TEXTURE_2D(0, 0, DepthMap, 0)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	int2 previousMipmapSize = GET_TEXTURE_2D_LOD_SIZE(DepthMap, 0);

	// Get integer pixel coordinate
	int3 coordinate = int3(FRAGMENT_POSITION.xy, 0);

	// Fetch a 2x2 neighborhood and compute the maximum
	coordinate.xy *= 2;
	float4 texels;
	texels.x = TEXTURE_FETCH_2D(DepthMap, coordinate).r;
	texels.y = TEXTURE_FETCH_2D(DepthMap, coordinate + int3(1, 0, 0)).r;
	texels.z = TEXTURE_FETCH_2D(DepthMap, coordinate + int3(0, 1, 0)).r;
	texels.w = TEXTURE_FETCH_2D(DepthMap, coordinate + int3(1, 1, 0)).r;

	// Determine the largest depth value and use it as the new down sampled color
	float maximumDepth = COMPARISON_OPERATOR(COMPARISON_OPERATOR(texels.x, texels.y), COMPARISON_OPERATOR(texels.z, texels.w));

	// If we are reducing an odd-sized texture, then the edge pixels need to fetch additional texels
	float2 extra;
	BRANCH if (((previousMipmapSize.x & 1) != 0) && coordinate.x == previousMipmapSize.x - 3)
	{
		extra.x = TEXTURE_FETCH_2D(DepthMap, coordinate + int3(2, 0, 0)).r;
		extra.y = TEXTURE_FETCH_2D(DepthMap, coordinate + int3(2, 1, 0)).r;
		maximumDepth = COMPARISON_OPERATOR(maximumDepth, COMPARISON_OPERATOR(extra.x, extra.y));
	}
	BRANCH if (((previousMipmapSize.y & 1) != 0) && coordinate.y == previousMipmapSize.y - 3)
	{
		extra.x = TEXTURE_FETCH_2D(DepthMap, coordinate + int3(0, 2, 0)).r;
		extra.y = TEXTURE_FETCH_2D(DepthMap, coordinate + int3(1, 2, 0)).r;
		maximumDepth = COMPARISON_OPERATOR(maximumDepth, COMPARISON_OPERATOR(extra.x, extra.y));
	}

	// Extreme case: If both edges are odd, fetch the bottom-right corner texel
	BRANCH if (((previousMipmapSize.x & 1) != 0) && ((previousMipmapSize.y & 1) != 0) && coordinate.x == previousMipmapSize.x - 3 && coordinate.y == previousMipmapSize.y - 3)
	{
		maximumDepth = COMPARISON_OPERATOR(maximumDepth, TEXTURE_FETCH_2D(DepthMap, coordinate + int3(2, 2, 0)).r);
	}

	// Done
	MAIN_OUTPUT_DEPTH = maximumDepth;
MAIN_END
