/*********************************************************\
 * Copyright (c) 2012-2018 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../SharedShaderPiece/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)
@includepiece(../SharedShaderPiece/SP_MotionBlur.asset)
@includepiece(./SP_Terrain.asset)
	@insertpiece(DefineTerrainPassDataStruct)

 
//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoord, 					 0)	// Texture coordinate
	INPUT_TEXTURE_COORDINATE(2, float3, PreviousClipSpacePositionVS, 1)	// Previous clip space position
	INPUT_TEXTURE_COORDINATE(3, float3, WorldSpacePosition,			 2)	// World space position
	DECLARE_COVERAGE_MASK
	DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)	// rgb = albedo color, a = alpha
	OUTPUT_COLOR(1)	// rgb = view space normal, a = roughness
	OUTPUT_COLOR(2)	// rg  = screen space velocity
OUTPUT_END

// Uniform buffers
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	TerrainPassDataStruct PassData;
UNIFORM_BUFFER_END

// Texture buffers
TEXTURE_BUFFER(1, 0, float4, LightTextureBuffer, 0)	// "LIGHT"

// Textures
TEXTURE_2D		(2, 0, HeightMap,				1)
TEXTURE_2D		(2, 1, _argb,					2)
TEXTURE_2D		(2, 2, _aor_rg_mb,				3)
TEXTURE_2D_ARRAY(2, 3, LayerArray_argb_nxa,		4)	// Detail layer array texture, RGB channel = Albedo map ("_a"-postfix), A channel = x component of normal map ("_n"-postfix)
TEXTURE_2D_ARRAY(2, 4, LayerArray_hr_rg_mb_nya,	5)	// Detail layer array texture, R channel = Height map ("_h"-postfix), G channel = Roughness map ("_r"-postfix), B channel = Metallic map ("_m"-postfix), A channel = y component of normal map ("_n"-postfix)
TEXTURE_2D		(2, 5, SplashMap,				6)
@property(ReceiveShadows)
	TEXTURE_2D_ARRAY(2, 6, ShadowMap, 7)
@end
TEXTURE_2D(2, 7, ReflectionMap, 8)
TEXTURE_3D_UINT(2, 8, LightClustersMap3D, 9)
@property(UseWetSurfaces)
	TEXTURE_2D(2, 9, WaterRipplesMap, 10)	// r = droplet mask, gb = ripples xy normal map, a = random grey value constant
	TEXTURE_2D(2, 10, WaterStreaksMap, 11)	// r = streak pattern, g = gradient, ba = streak xy normal map
@end

// Samplers
SAMPLER_STATE(3, 0, SamplerLinear, 0)
SAMPLER_STATE(3, 1, SamplerLinearClamp, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../SharedShaderPiece/SP_Normal.asset)
	@insertpiece(DefineGetTangentFrame)
	@insertpiece(DefineUnpackTextureNormalXY)
	@insertpiece(DefineCalculateCotangentFrame)
	@insertpiece(DefineFilterNormal)
	@insertpiece(DefineBlendNormalUdn)
// @includepiece(./SP_Terrain.asset) is already included at the top
	@property(UseTriplanarMapping)
		@insertpiece(DefineTriplanarMapping)
	@end
@includepiece(../SharedShaderPiece/SP_PhysicallyBasedShading.asset)
	@property(HighQualityLighting)
		@insertpiece(DefinePhysicallyBasedShading)
	@end
	@property(!HighQualityLighting)
		@insertpiece(DefineBlinnPhongBasedShading)
	@end
@includepiece(../SharedShaderPiece/SP_Depth.asset)
	@insertpiece(DefineGetLinearDepthReversedZ)
@property(ReceiveShadows)
	@includepiece(../SharedShaderPiece/SP_ExponentialShadow.asset)
		@insertpiece(DefineExponentialShadow)
	@includepiece(../SharedShaderPiece/SP_Shadow.asset)
		@insertpiece(DefineCalculateShadowVisibility)
		@insertpiece(DefineShadowDebugging)
@end
@includepiece(../SharedShaderPiece/SP_Noise.asset)
	@insertpiece(DefineMultipleOctavesNoise3D)
@includepiece(../SharedShaderPiece/SP_Color.asset)
	@insertpiece(DefineOverlayColorBlending)
@property(UseWetSurfaces)
	@includepiece(../SharedShaderPiece/SP_WetSurfaces.asset)
		@insertpiece(DefineWetSurfaces)
@end


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	@insertpiece(DefineSharedFragmentShading)

	// Shadow mapping
	float shadowVisibility = 1.0f;
	@property(ReceiveShadows)
		shadowVisibility = CalculateShadowVisibility(worldSpacePosition - PassData.UnmodifiedWorldSpaceCameraPosition, GetLinearDepthReversedZ(FRAGMENT_POSITION.z));
	@end

	// Water influence on material BRDF
	// -> Wet surfaces parameter layout: x=wet level, y=hole/cracks flood level, z=puddle flood level, w=rain intensity
	@property(UseWetSurfaces)
		BRANCH if (0.0f != PassData.WetSurfaces.x)
		{
			float3x3 TBN = CalculateCotangentFrame(viewSpaceNormal, viewSpaceIncident, texCoord);
			DoWaterProcess(worldSpacePosition, TBN, PassData.GlobalTimeInSeconds, PassData.WorldSpaceToViewSpaceQuaternion, shadowVisibility, blended_hr_rg_mb_nya.r, multipleOctavesNoise3D(worldSpacePosition), PassData.WetSurfaces.x, PassData.WetSurfaces.y, PassData.WetSurfaces.z, PassData.WetSurfaces.w, albedo, roughness, metallic, viewSpaceNormal);
		}
	@end

	// Calculate screen space velocity
	worldSpacePosition -= PassData.UnmodifiedWorldSpaceCameraPosition;
	@insertpiece(DefineCalculateScreenSpaceVelocity)

	// Get reflection color
	float3 reflectionColor;
	{
		// Temporal reprojection: We're using data from the previous frame for the reflection color. In order to hide that
		// the reflections lag one frame behind we're reprojecting the reflection basing on previous camera related data.
		float2 reflectionTexCoord = (FRAGMENT_POSITION.xy / PassData.ViewportSize) - velocity;
		float2 coordinateEdgeAttenuation = float2(1.0f, 1.0f) - pow(SATURATE(abs(reflectionTexCoord - float2(0.5f, 0.5f)) * 2), float2(8.0f, 8.0f));
		float screenEdgeAttenuation = SATURATE(min(coordinateEdgeAttenuation.x, coordinateEdgeAttenuation.y));
		reflectionColor = SAMPLE_2D(ReflectionMap, SamplerLinear, reflectionTexCoord).rgb * float3(screenEdgeAttenuation, screenEdgeAttenuation, screenEdgeAttenuation);
	}

	// Ambient term
	float3 color = (reflectionColor * metallic + albedo) * (PassData.AmbientColor.rgb + CalculateHemisphereLighting(worldSpaceNormal.xyz, PassData.AmbientColor.rgb * 0.7f, PassData.AmbientColor.rgb * 0.2f));

	// Directional sunlight, our primary light
	BRANCH if (shadowVisibility > 0.0f)
	{
		color += shadowVisibility * CalculateLighting(albedo, roughness, metallic, viewSpaceNormal, viewSpaceIncident, reflectionColor, PassData.ViewSpaceSunlightDirection, PassData.SunlightColor);
	}

	// Perform clustered shading
	@insertpiece(PerformClusteredShading)

	// Apply ambient occlusion
	color *= ambientOcclusion;

	// Complex pixel detection
	// -> See "Antialiased Deferred Rendering" - https://docs.nvidia.com/gameworks/content/gameworkslibrary/graphicssamples/d3d_samples/antialiaseddeferredrendering.htm
	float edgePixel = (COVERAGE_MASK != PassData.FullCoverageMask) ? 1.0f : 0.0f;

	// Don't remove the following commented code: Shadow map debugging
	// @property(ReceiveShadows)
	// color *= GetShadowCascadeColor(GetLinearDepthReversedZ(FRAGMENT_POSITION.z));
	// @end

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(color, edgePixel);
	MAIN_OUTPUT_COLOR(1) = float4(viewSpaceNormal, roughness);
	MAIN_OUTPUT_COLOR(2) = float4(velocity.x, velocity.y, 0.0f, 0.0f);
MAIN_END
