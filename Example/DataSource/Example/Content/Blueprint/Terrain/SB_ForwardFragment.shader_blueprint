/*********************************************************\
 * Copyright (c) 2012-2018 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(../SharedShaderPiece/SP_Core.asset)
	@insertpiece(SetCrossPlatformSettings)
@includepiece(../SharedShaderPiece/SP_MotionBlur.asset)
@includepiece(./SP_Terrain.asset)
	@insertpiece(DefineTerrainPassDataStruct)

 
//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoord, 					 0)	// Texture coordinate
	INPUT_TEXTURE_COORDINATE(2, float3, PreviousClipSpacePositionVS, 1)	// Previous clip space position
	INPUT_TEXTURE_COORDINATE(3, float3, WorldSpacePosition, 		 2)	// World space position
	DECLARE_COVERAGE_MASK
	DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)	// rgb = albedo color, a = alpha
	OUTPUT_COLOR(1)	// rgb = view space normal, a = roughness
	OUTPUT_COLOR(2)	// rg  = screen space velocity
OUTPUT_END

// Uniform buffers
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	TerrainPassDataStruct PassData;
UNIFORM_BUFFER_END

// Texture buffers
TEXTURE_BUFFER(1, 0, float4, LightTextureBuffer, 0)	// "LIGHT"

// Textures
TEXTURE_2D(2, 0, HeightMap, 1)
TEXTURE_2D(2, 1, _argb, 2)
TEXTURE_2D(2, 2, _aor_rg_mb, 3)
@property(ReceiveShadows)
	TEXTURE_2D_ARRAY(2, 3, ShadowMap, 4)
@end
TEXTURE_2D(2, 4, ReflectionMap, 5)
TEXTURE_3D_UINT(2, 5, LightClustersMap3D, 6)
@property(UseWetSurfaces)
	TEXTURE_2D(2, 6, WaterRipplesMap, 7)	// r = droplet mask, gb = ripples xy normal map, a = random grey value constant
	TEXTURE_2D(2, 7, WaterStreaksMap, 8)	// r = streak pattern, g = gradient, ba = streak xy normal map
@end

// Samplers
SAMPLER_STATE(3, 0, SamplerLinear, 0)
SAMPLER_STATE(3, 1, SamplerLinearClamp, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(../SharedShaderPiece/SP_TangentFrame.asset)
	@insertpiece(DefineGetTangentFrame)
	@insertpiece(DefineUnpackTextureNormalXY)
	@insertpiece(DefineCalculateCotangentFrame)
@includepiece(../SharedShaderPiece/SP_PhysicallyBasedShading.asset)
	@property(HighQualityLighting)
		@insertpiece(DefinePhysicallyBasedShading)
	@end
	@property(!HighQualityLighting)
		@insertpiece(DefineBlinnPhongBasedShading)
	@end
@includepiece(../SharedShaderPiece/SP_Depth.asset)
	@insertpiece(DefineGetLinearDepthReversedZ)
@property(ReceiveShadows)
	@includepiece(../SharedShaderPiece/SP_ExponentialShadow.asset)
		@insertpiece(DefineExponentialShadow)
	@includepiece(../SharedShaderPiece/SP_Shadow.asset)
		@insertpiece(DefineCalculateShadowVisibility)
		@insertpiece(DefineShadowDebugging)
@end
@includepiece(../SharedShaderPiece/SP_Noise.asset)
	@insertpiece(DefineMultipleOctavesNoise3D)
@property(UseWetSurfaces)
	@includepiece(../SharedShaderPiece/SP_WetSurfaces.asset)
		@insertpiece(DefineWetSurfaces)
@end

// From "Advanced Real-Time Rendering in 3D Graphics and Games Course â€“ SIGGRAPH 2007 - Chapter 5: Terrain Rendering in Frostbite Using Procedural Shader Splatting" by Johan Andersson
float3 FilterNormal(float2 uv, float2 texelSize, float texelAspect)
{
	float4 h;
	h[0] = SAMPLE_2D_LOD(HeightMap, SamplerLinearClamp, float4(uv + texelSize * float2( 0, -1), 0.0f, 0.0f)).r * texelAspect;
	h[1] = SAMPLE_2D_LOD(HeightMap, SamplerLinearClamp, float4(uv + texelSize * float2(-1,  0), 0.0f, 0.0f)).r * texelAspect;
	h[2] = SAMPLE_2D_LOD(HeightMap, SamplerLinearClamp, float4(uv + texelSize * float2( 1,  0), 0.0f, 0.0f)).r * texelAspect;
	h[3] = SAMPLE_2D_LOD(HeightMap, SamplerLinearClamp, float4(uv + texelSize * float2( 0,  1), 0.0f, 0.0f)).r * texelAspect;
	float3 n;
	n.z = h[0] - h[3];
	n.x = h[1] - h[2];
	n.y = 2.0f;
	return normalize(n);
}

// TODO(co) Use this for the detail textures
// The tri-planar texture mapping is basing on "Use Tri-Planar Texture Mapping for Better Terrain" - https://gamedevelopment.tutsplus.com/articles/use-tri-planar-texture-mapping-for-better-terrain--gamedev-13821
float3 GetTriPlanarBlending(float3 worldSpaceNormal)
{
	float3 blending = abs(worldSpaceNormal);
	blending = normalize(max(blending, 0.00001f));	// Force weights to sum to 1.0
	float b = (blending.x + blending.y + blending.z);
	blending /= float3(b, b, b);
	return blending;
}
/*
float4 SampleTriPlanar(in Texture2D<float4> textureMap, in SamplerState samplerState, in float3 worldSpacePosition, in float3 triPlanarBlending)
{
	// Sample the three planar projections
	float4 xAxis = SAMPLE_2D(textureMap, samplerState, worldSpacePosition.yz);
	float4 yAxis = SAMPLE_2D(textureMap, samplerState, worldSpacePosition.xz);
	float4 zAxis = SAMPLE_2D(textureMap, samplerState, worldSpacePosition.xy);

	// Blend the results of the three planar projections
	return xAxis * triPlanarBlending.x + yAxis * triPlanarBlending.y + zAxis * triPlanarBlending.z;
}
*/

// TODO(co) Use "Advanced Terrain Texture Splatting" by Andrey Mishkinis - https://www.gamedev.net/articles/programming/graphics/advanced-terrain-texture-splatting-r3287/
/*
float3 blend(float4 texture1, float a1, float4 texture2, float a2)
{
	float depth = 0.2f;
	float ma = max(texture1.a + a1, texture2.a + a2) - depth;
	float b1 = max(texture1.a + a1 - ma, 0.0f);
	float b2 = max(texture2.a + a2 - ma, 0.0f);
	return (texture1.rgb * b1 + texture2.rgb * b2) / (b1 + b2);
}
*/


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Read channel packed texture data
	// -> "_argb" = RGB channel = Albedo map ("_a"-postfix)
	// -> "_aor_rg_mb" = R channel = Ambient occlusion map ("_ao"-postfix), G channel = Roughness map ("_r"-postfix), B channel = Metallic map ("_m"-postfix)
	float2 texCoord = MAIN_INPUT(TexCoord);
	float4 value_argb = SAMPLE_2D(_argb, SamplerLinearClamp, texCoord);
	float4 value_aor_rg_mb = SAMPLE_2D(_aor_rg_mb, SamplerLinearClamp, texCoord);

	// Get albedo, ambient occlusion, roughness and metallic
	float3 albedo = value_argb.rgb;
	float ambientOcclusion = value_aor_rg_mb.r;
	float roughness = value_aor_rg_mb.g;
	float metallic = value_aor_rg_mb.b;

	// Get the view space normal
	float3 worldSpaceNormal = FilterNormal(texCoord, float2(1.0f, 1.0f) / GET_TEXTURE_2D_LOD_SIZE(HeightMap, 0), PassData.WorldSize.y);
	float3 viewSpaceNormal = MultiplyQuaternionVector(PassData.WorldSpaceToViewSpaceQuaternion, worldSpaceNormal);

	// Shadow mapping
	float3 worldSpacePosition = MAIN_INPUT(WorldSpacePosition);
	float shadowVisibility = 1.0f;
	@property(ReceiveShadows)
		shadowVisibility = CalculateShadowVisibility(worldSpacePosition - PassData.UnmodifiedWorldSpaceCameraPosition, GetLinearDepthReversedZ(FRAGMENT_POSITION.z));
	@end

	// Derive data
	float3 worldSpaceIncident = normalize(-worldSpacePosition);	// Since we're using camera relative rendering, "PassData.WorldSpaceCameraPosition - worldSpacePosition" becomes just "-worldSpacePosition"
	float3 viewSpaceIncident = MultiplyQuaternionVector(PassData.WorldSpaceToViewSpaceQuaternion, worldSpaceIncident);
	float3 triPlanarBlending = GetTriPlanarBlending(worldSpaceNormal);	// TODO(co) Use this for the detail textures

	// Water influence on material BRDF
	// -> Wet surfaces parameter layout: x=wet level, y=hole/cracks flood level, z=puddle flood level, w=rain intensity
	@property(UseWetSurfaces)
		BRANCH if (0.0f != PassData.WetSurfaces.x)
		{
			float heightMapValue = 0.0f;	// TODO(co)
			float3x3 TBN = CalculateCotangentFrame(viewSpaceNormal, viewSpaceIncident, texCoord);
			DoWaterProcess(worldSpacePosition, TBN, PassData.GlobalTimeInSeconds, PassData.WorldSpaceToViewSpaceQuaternion, shadowVisibility, heightMapValue, multipleOctavesNoise3D(worldSpacePosition), PassData.WetSurfaces.x, PassData.WetSurfaces.y, PassData.WetSurfaces.z, PassData.WetSurfaces.w, albedo, roughness, metallic, viewSpaceNormal);
		}
	@end

	// Calculate screen space velocity
	worldSpacePosition -= PassData.UnmodifiedWorldSpaceCameraPosition;
	@insertpiece(DefineCalculateScreenSpaceVelocity)

	// Get reflection color
	float3 reflectionColor;
	{
		// Temporal reprojection: We're using data from the previous frame for the reflection color. In order to hide that
		// the reflections lag one frame behind we're reprojecting the reflection basing on previous camera related data.
		float2 reflectionTexCoord = (FRAGMENT_POSITION.xy / PassData.ViewportSize) - velocity;
		float2 coordinateEdgeAttenuation = float2(1.0f, 1.0f) - pow(SATURATE(abs(reflectionTexCoord - float2(0.5f, 0.5f)) * 2), float2(8.0f, 8.0f));
		float screenEdgeAttenuation = SATURATE(min(coordinateEdgeAttenuation.x, coordinateEdgeAttenuation.y));
		reflectionColor = SAMPLE_2D(ReflectionMap, SamplerLinear, reflectionTexCoord).rgb * float3(screenEdgeAttenuation, screenEdgeAttenuation, screenEdgeAttenuation);
	}

	// Ambient term
	float3 color = (reflectionColor * metallic + albedo) * (PassData.AmbientColor.rgb + CalculateHemisphereLighting(worldSpaceNormal.xyz, PassData.AmbientColor.rgb * 0.7f, PassData.AmbientColor.rgb * 0.2f));

	// Directional sunlight, our primary light
	BRANCH if (shadowVisibility > 0.0f)
	{
		color += shadowVisibility * CalculateLighting(albedo, roughness, metallic, viewSpaceNormal, viewSpaceIncident, reflectionColor, PassData.ViewSpaceSunlightDirection, PassData.SunlightColor);
	}

	// Perform clustered shading
	@insertpiece(PerformClusteredShading)

	// Apply ambient occlusion
	color *= ambientOcclusion;

	// Complex pixel detection
	// -> See "Antialiased Deferred Rendering" - https://docs.nvidia.com/gameworks/content/gameworkslibrary/graphicssamples/d3d_samples/antialiaseddeferredrendering.htm
	float edgePixel = (COVERAGE_MASK != PassData.FullCoverageMask) ? 1.0f : 0.0f;

	// Don't remove the following commented code: Shadow map debugging
	// @property(ReceiveShadows)
	// color *= GetShadowCascadeColor(GetLinearDepthReversedZ(FRAGMENT_POSITION.z));
	// @end

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(color, edgePixel);
	MAIN_OUTPUT_COLOR(1) = float4(viewSpaceNormal, roughness);
	MAIN_OUTPUT_COLOR(2) = float4(velocity.x, velocity.y, 0.0f, 0.0f);
MAIN_END
