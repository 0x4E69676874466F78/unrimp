{
	"Format":
	{
		"Type": "CompositorNodeAsset",
		"Version": "1"
	},
	"CompositorNodeAsset":
	{
		"InputChannels":
		{
			"0": "InputRenderTarget",
			"1": "OutputRenderTarget"
		},
		"RenderTargetTextures":
		{
			"Example/Texture/Dynamic/ReflectionRenderTarget":
			{
				"TextureFormat": "R11G11B10F"
			},
			"Example/Texture/Dynamic/HdrMultisampleColorRenderTarget":
			{
				"TextureFormat": "R16G16B16A16F",
				"Flags": "SHADER_RESOURCE | RENDER_TARGET | ALLOW_MULTISAMPLE | ALLOW_RESOLUTION_SCALE"
			},
			"Example/Texture/Dynamic/MultisampleDepthStencilRenderTarget":
			{
				"TextureFormat": "D32_FLOAT",
				"Flags": "SHADER_RESOURCE | RENDER_TARGET | ALLOW_MULTISAMPLE | ALLOW_RESOLUTION_SCALE"
			},
			"Example/Texture/Dynamic/DepthStencilRenderTarget":
			{
				"TextureFormat": "D32_FLOAT"
			},
			"Example/Texture/Dynamic/HierarchicalDepthStencilRenderTarget":
			{
				"Description": "Hierarchical depth buffer (aka Hi-Z map or HZB), useful for GPU occlusion culling, screen space reflections as well as using the second depth buffer mipmap for e.g. a half-sized volumetric light/fog bilateral upsampling",
				"Note": "Inside this compositor only the top depth buffer mipmap is accessed, hence there's no need for mipmap generation",
				"TextureFormat": "D32_FLOAT",
				"Flags": "SHADER_RESOURCE | ALLOW_RESOLUTION_SCALE"
			},
			"Example/Texture/Dynamic/MultisampleNormalRenderTarget":
			{
				"Description": "rgb = view space normal",
				"TextureFormat": "R16G16B16A16F",
				"Flags": "SHADER_RESOURCE | RENDER_TARGET | ALLOW_MULTISAMPLE | ALLOW_RESOLUTION_SCALE"
			},
			"Example/Texture/Dynamic/HdrColorRenderTarget0":
			{
				"TextureFormat": "R16G16B16A16F"
			},
			"Example/Texture/Dynamic/HdrColorRenderTarget1":
			{
				"TextureFormat": "R11G11B10F"
			},
			"Example/Texture/Dynamic/LuminanceRenderTarget":
			{
				"Width": "1024",
				"Height": "1024",
				"TextureFormat": "R32_FLOAT",
				"Flags": "SHADER_RESOURCE | UNORDERED_ACCESS | GENERATE_MIPMAPS"
			},
			"Example/Texture/Dynamic/PreviousLuminanceRenderTarget":
			{
				"Width": "1",
				"Height": "1",
				"TextureFormat": "R32_FLOAT",
				"Flags": "SHADER_RESOURCE"
			},
			"Example/Texture/Dynamic/AdaptiveLuminanceRenderTarget":
			{
				"Width": "1",
				"Height": "1",
				"TextureFormat": "R32_FLOAT",
				"Flags": "SHADER_RESOURCE | UNORDERED_ACCESS"
			},
			"Example/Texture/Dynamic/BloomColorRenderTarget":
			{
				"TextureFormat": "R11G11B10F",
				"Width": "256",
				"Height": "256",
				"Flags": "SHADER_RESOURCE | UNORDERED_ACCESS"
			},
			"Example/Texture/Dynamic/BloomDownscale2ColorRenderTarget":
			{
				"TextureFormat": "R11G11B10F",
				"Width": "128",
				"Height": "128"
			},
			"Example/Texture/Dynamic/BloomDownscale4ColorRenderTarget":
			{
				"TextureFormat": "R11G11B10F",
				"Width": "64",
				"Height": "64"
			},
			"Example/Texture/Dynamic/BloomDownscale8ColorRenderTarget":
			{
				"TextureFormat": "R11G11B10F",
				"Width": "32",
				"Height": "32"
			},
			"Example/Texture/Dynamic/BloomDownscale8GaussianBlurTemporaryRenderTarget":
			{
				"TextureFormat": "R11G11B10F",
				"Width": "32",
				"Height": "32"
			},
			"Example/Texture/Dynamic/LdrColorRenderTarget0":
			{
				"TextureFormat": "R8G8B8A8",
				"Flags": "SHADER_RESOURCE | UNORDERED_ACCESS | ALLOW_RESOLUTION_SCALE"
			},
			"Example/Texture/Dynamic/LdrColorRenderTarget1":
			{
				"TextureFormat": "R8G8B8A8"
			}
		},
		"Framebuffers":
		{
			"ReflectionFramebuffer":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/ReflectionRenderTarget" ]
			},
			"HdrMultisampleFramebuffer":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/HdrMultisampleColorRenderTarget", "Example/Texture/Dynamic/MultisampleNormalRenderTarget" ],
				"DepthStencilTexture": "Example/Texture/Dynamic/MultisampleDepthStencilRenderTarget"
			},
			"MsaaResolveDepthFramebuffer":
			{
				"DepthStencilTexture": "Example/Texture/Dynamic/DepthStencilRenderTarget"
			},
			"HdrFramebuffer0":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/HdrColorRenderTarget0" ]
			},
			"HdrFramebuffer1":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/HdrColorRenderTarget1" ]
			},
			"TransparentFramebuffer":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/HdrColorRenderTarget1" ],
				"DepthStencilTexture": "Example/Texture/Dynamic/DepthStencilRenderTarget"
			},
			"BloomDownscale2Framebuffer":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/BloomDownscale2ColorRenderTarget" ]
			},
			"BloomDownscale4Framebuffer":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/BloomDownscale4ColorRenderTarget" ]
			},
			"BloomDownscale8Framebuffer":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/BloomDownscale8ColorRenderTarget" ]
			},
			"BloomDownscale8GaussianBlurTemporaryFramebuffer":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/BloomDownscale8GaussianBlurTemporaryRenderTarget" ]
			},
			"LdrFramebuffer1":
			{
				"ColorTextures": [ "Example/Texture/Dynamic/LdrColorRenderTarget1" ]
			}
		},
		"Targets":
		{
			"":
			{
				"ShadowMap":
				{
					"MinimumRenderQueueIndex": "0",
					"MaximumRenderQueueIndex": "253",
					"MaterialTechnique": "DepthOnly",
					"Texture": "Example/Texture/Dynamic/ShadowMapRenderTarget",
					"DepthToExponentialVarianceMaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/DepthToExponentialVariance.asset",
					"BlurMaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/ShadowBlur.asset"
				}
			},
			"ReflectionFramebuffer":
			{
				"Clear":
				{
					"NumberOfExecutions": "1",
					"Flags": "COLOR"
				},
				"Compute":
				{
					"Name": "Generate reflection",
					"SkipFirstExecution": "TRUE",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/Reflection.asset",
					"SetMaterialProperties":
					{
						"UseScreenSpaceReflectionMap": "FALSE",
						"NormalMap": "Example/Texture/Dynamic/MultisampleNormalRenderTarget",
						"DepthMap": "Example/Texture/Dynamic/HierarchicalDepthStencilRenderTarget"
					}
				}
			},
			"HdrMultisampleFramebuffer":
			{
				"Description": "Forward rendering, also renders out view space normals into an additional render target",
				"Clear":
				{
					"Flags": "COLOR | DEPTH",
					"Color": "0.5 0.5 0.5 0.0"
				},
				"VrHiddenAreaMesh":
				{
					"Flags": "DEPTH"
				},
				"Scene":
				{
					"Name": "Solid objects",
					"MinimumRenderQueueIndex": "0",
					"MaximumRenderQueueIndex": "253",
					"MaterialTechnique": "Forward"
				},
				"Scene":
				{
					"Name": "Terrain",
					"MinimumRenderQueueIndex": "253",
					"MaximumRenderQueueIndex": "253",
					"MaterialTechnique": "Forward"
				},
				"Scene":
				{
					"Name": "Sky",
					"MaximumDepth": "0.0",
					"MinimumRenderQueueIndex": "254",
					"MaximumRenderQueueIndex": "254",
					"MaterialTechnique": "Default"
				}
			},
			"HdrFramebuffer0":
			{
				"ResolveMultisample":
				{
					"SourceMultisampleFramebuffer": "HdrMultisampleFramebuffer"
				}
			},
			"MsaaResolveDepthFramebuffer":
			{
				"Compute":
				{
					"Name": "MSAA resolve",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/MsaaResolveDepth.asset",
					"SetMaterialProperties":
					{
						"DepthMap": "Example/Texture/Dynamic/MultisampleDepthStencilRenderTarget"
					}
				}
			},
			"":
			{
				"Copy":
				{
					"Name": "HZB depth map copy",
					"Description": "Sadly even with read-only it's impossible to read from a depth map while it's bound as depth buffer, so we need a copy",
					"DestinationTexture": "Example/Texture/Dynamic/HierarchicalDepthStencilRenderTarget",
					"SourceTexture": "Example/Texture/Dynamic/DepthStencilRenderTarget"
				}
			},
			"HdrFramebuffer1":
			{
				"Compute":
				{
					"Name": "Composite forward data",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/Forward.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/HdrColorRenderTarget0",
						"DepthMap": "Example/Texture/Dynamic/DepthStencilRenderTarget",
						"ScreenSpaceAmbientOcclusionMap": "Unrimp/Texture/DynamicByCode/WhiteMap2D"
					}
				}
			},
			"TransparentFramebuffer":
			{
				"Scene":
				{
					"Name": "Transparent objects",
					"MinimumRenderQueueIndex": "255",
					"MaximumRenderQueueIndex": "255",
					"TransparentPass": "TRUE",
					"MaterialTechnique": "Transparent"
				}
			},
			"":
			{
				"Compute":
				{
					"Name": "Calculate luminance",
					"Description": "Calculate luminance. The mipmaps are generated automatically after the next render target change.",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/CalculateLuminance.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/HdrColorRenderTarget1",
						"OutputTexture2D": "Example/Texture/Dynamic/LuminanceRenderTarget"
					}
				},
				"Copy":
				{
					"Name": "Backup previous luminance",
					"Description": "Backup the adaptive luminance from the previous frame. Skip the first execution since there's no valid previous adaptive luminance available in this situation. The current compositor target isn't used for this.",
					"SkipFirstExecution": "TRUE",
					"DestinationTexture": "Example/Texture/Dynamic/PreviousLuminanceRenderTarget",
					"SourceTexture": "Example/Texture/Dynamic/AdaptiveLuminanceRenderTarget"
				},
				"Compute":
				{
					"Name": "Adaptive luminance",
					"Description": "Slowly adjusts the scene luminance based on the previous scene luminance. Skip the first execution since there's no valid previous adaptive luminance available in this situation.",
					"SkipFirstExecution": "TRUE",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/AdaptiveLuminance.asset",
					"SetMaterialProperties":
					{
						"CurrentLuminanceMap": "Example/Texture/Dynamic/LuminanceRenderTarget",
						"PreviousLuminanceMap": "Example/Texture/Dynamic/PreviousLuminanceRenderTarget",
						"OutputTexture2D": "Example/Texture/Dynamic/AdaptiveLuminanceRenderTarget"
					}
				},
				"Compute":
				{
					"Name": "Adaptive luminance",
					"Description": "During the first execution there's no valid previous adaptive luminance available, so use the just calculated luminance as previous luminance.",
					"NumberOfExecutions": "1",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/AdaptiveLuminance.asset",
					"SetMaterialProperties":
					{
						"CurrentLuminanceMap": "Example/Texture/Dynamic/LuminanceRenderTarget",
						"FirstExecution": "TRUE",
						"OutputTexture2D": "Example/Texture/Dynamic/AdaptiveLuminanceRenderTarget"
					}
				},
				"Compute":
				{
					"Name": "Bloom threshold",
					"Description": "Bloom pass: Use a lower exposure to produce a value suitable for a bloom pass",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/HdrToLdrBloomThreshold.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/HdrColorRenderTarget1",
						"LuminanceMap": "Example/Texture/Dynamic/AdaptiveLuminanceRenderTarget",
						"OutputTexture2D": "Example/Texture/Dynamic/BloomColorRenderTarget"
					}
				}
			},
			"BloomDownscale2Framebuffer":
			{
				"Compute":
				{
					"Name": "Bloom downscale",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/Scale.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/BloomColorRenderTarget"
					}
				}
			},
			"BloomDownscale4Framebuffer":
			{
				"Compute":
				{
					"Name": "Bloom downscale",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/Scale.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/BloomDownscale2ColorRenderTarget"
					}
				}
			},
			"BloomDownscale8Framebuffer":
			{
				"Compute":
				{
					"Name": "Bloom Downscale",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/Scale.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/BloomDownscale4ColorRenderTarget"
					}
				}
			},
			"@foreach(4, i)":
			{
				"BloomDownscale8GaussianBlurTemporaryFramebuffer":
				{
					"Compute":
					{
						"Name": "Bloom vertical blur",
						"Description": "Bloom pass: Vertical Gaussian blur",
						"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/GaussianBlur.asset",
						"SetMaterialProperties":
						{
							"VerticalBlur": "TRUE", 
							"ColorMap": "Example/Texture/Dynamic/BloomDownscale8ColorRenderTarget"
						}
					}
				},
				"BloomDownscale8Framebuffer":
				{
					"Compute":
					{
						"Name": "Bloom horizontal blur",
						"Description": "Bloom pass: Horizontal Gaussian blur",
						"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/GaussianBlur.asset",
						"SetMaterialProperties":
						{
							"VerticalBlur": "FALSE", 
							"ColorMap": "Example/Texture/Dynamic/BloomDownscale8GaussianBlurTemporaryRenderTarget"
						}
					}
				}
			},
			"BloomDownscale4Framebuffer":
			{
				"Compute":
				{
					"Name": "Bloom upscale",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/Scale.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/BloomDownscale8ColorRenderTarget"
					}
				}
			},
			"BloomDownscale2Framebuffer":
			{
				"Compute":
				{
					"Name": "Bloom upscale",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/Scale.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/BloomDownscale4ColorRenderTarget"
					}
				}
			},
			"":
			{
				"Compute":
				{
					"Name": "HDR to LDR",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/HdrToLdr.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/HdrColorRenderTarget1",
						"LuminanceMap": "Example/Texture/Dynamic/AdaptiveLuminanceRenderTarget",
						"BloomMap": "Example/Texture/Dynamic/BloomDownscale2ColorRenderTarget",
						"UseLensFlareMap": "FALSE",
						"OutputTexture2D": "Example/Texture/Dynamic/LdrColorRenderTarget0"
					}
				}
			},
			"OutputRenderTarget":
			{
				"Compute":
				{
					"Name": "Final",
					"MaterialBlueprint": "$ProjectName/MaterialBlueprint/Compositor/Final.asset",
					"SetMaterialProperties":
					{
						"ColorMap": "Example/Texture/Dynamic/LdrColorRenderTarget0"
					}
				}
			}
		},
		"OutputChannels":
		{
			"0": "OutputRenderTarget",
			"1": "InputRenderTarget"
		}
	}
}
